// ce code est gener par ArduinoIOT il permet de partemter variable global envoyer au serveur et de gerer la connection 
// wifi et la connection server  il  n'a pas  besoin d'être editer arduinoIOT le gère automatiquement   

// Code generated by Arduino IoT Cloud, DO NOT EDIT.

#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>

const char DEVICE_LOGIN_NAME[]  = "7648bffc-645a-4f05-9cee-a2fbe6e8a705";

const char SSID[]               = SECRET_SSID;    // Network SSID (name)
const char PASS[]               = SECRET_PASS;    // Network password (use for WPA, or use as key for WEP)
const char DEVICE_KEY[]  = SECRET_DEVICE_KEY;    // Secret device password


CloudTemperatureSensor temperature;
int CO2;
int gaz_inflamable;
int pM1;
int pM100;
int pM25;
int pollution_air;
int TVOC;
CloudRelativeHumidity humidity;

void initProperties(){

  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
  ArduinoCloud.addProperty(temperature, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(CO2, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(gaz_inflamable, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(pM1, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(pM100, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(pM25, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(pollution_air, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(TVOC, READ, 1 * SECONDS, NULL);
  ArduinoCloud.addProperty(humidity, READ, 1 * SECONDS, NULL);

}

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);
